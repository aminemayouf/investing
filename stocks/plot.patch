diff --git a/stocks/fundamental_analysis.py b/stocks/fundamental_analysis.py
index b5b6e73..36608ab 100755
--- a/stocks/fundamental_analysis.py
+++ b/stocks/fundamental_analysis.py
@@ -5,6 +5,9 @@ import urllib.request
 import requests
 import numpy as np
 import gettext
+from datetime import datetime
+from matplotlib import pyplot as plt
+from mplfinance.original_flavor import candlestick_ohlc
 from tabulate import tabulate
 from utils.millify import millify
 
@@ -85,6 +88,14 @@ if update:
         print(_('The company\'s balance-sheet data could not be downloaded for the following reason') +': ', response.reason)
     else:
         data.append(response.json())
+    # fetch company's charts
+    url = "https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart"
+    querystring = {"region":"AS","interval":"1m","symbol":"PHARM.AS","range":"max"}
+    response = requests.request("GET", url, headers=headers, params=querystring)
+    if not response:
+        print(_('The company\'s charts could not be downloaded for the following reason') +': ', response.reason)
+    else:
+        data.append(response.json())
     if data:
         print(_('Successfuly downloaded the company\'s data'))
         # store company's data as json
@@ -181,6 +192,38 @@ if 'depreciation' in cash_flow[0]:
 elif 'depreciation' in cash_flow[1]:
     depreciation = cash_flow[1]['depreciation']['raw']
 
+if len(data) < 3:
+    print('Charts were not downloaded')
+else:
+    charts = data[2]
+    indicators = charts['chart']['result'][0]['indicators']
+    quote = indicators['quote'][0]
+    ohlc = []
+    year = datetime.fromtimestamp(charts['chart']['result'][0]['timestamp'][0]).year
+    axis = plt.subplot2grid((1,1), (0,0))
+    for i in range(len(charts['chart']['result'][0]['timestamp'])-1):
+        dt = datetime.fromtimestamp(charts['chart']['result'][0]['timestamp'][i])
+        if dt.year != year:
+            year = dt.year
+            date = dt.strftime("%Y")
+            open_price = quote['open'][i]
+            high = quote['high'][i]
+            low = quote['low'][i]
+            close_price = quote['close'][i]
+            volume = quote['volume'][i]
+            d = int(date), open_price, high, low, close_price, volume
+            ohlc.append(d)
+    candlestick_ohlc(axis, ohlc, width=0.6, colorup='#77d879', colordown='#db3f3f')
+    for label in axis.xaxis.get_ticklabels():
+        label.set_rotation(45)
+    # axis.grid(True)
+    plt.xlabel('Date')
+    plt.ylabel('Price')
+    plt.title(company_name)
+    plt.subplots_adjust(left=0.09, bottom=0.20, right=0.94, top=0.90, wspace=0.2, hspace=0)
+    plt.show()
+    exit(0)
+
 buffet_approved = 0
 buffet_criterias = 0
 buffet_approved_summary = ''
